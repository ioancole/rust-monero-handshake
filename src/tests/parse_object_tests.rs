#[cfg(test)]
mod tests {
    use crate::protocol::parse_object;
    use crate::network::{HandshakeResponse, PeerlistEntry};
    use std::io::{Cursor};
    use crate::constants::*;
    use crate::utils::u32_to_ip;
    
    #[test]
    fn test_parse_object() { ;
        // Example handshake response object bytes with 3 peerlist entries
        let object_bytes = [12, 18, 108, 111, 99, 97, 108, 95, 112, 101, 101, 114, 108, 105, 115, 116, 95, 110, 101, 119, 140, 12, 8, 3, 97, 100, 114, 12, 8, 4, 97, 100, 100, 114, 12, 8, 4, 109, 95, 105, 112, 6, 195, 160, 220, 156, 6, 109, 95, 112, 111, 114, 116, 7, 160, 70, 4, 116, 121, 112, 101, 8, 1, 2, 105, 100, 5, 153, 178, 159, 111, 69, 232, 101, 122, 12, 3, 97, 100, 114, 12, 8, 4, 97, 100, 100, 114, 12, 8, 4, 109, 95, 105, 112, 6, 222, 252, 14, 38, 6, 109, 95, 112, 111, 114, 116, 7, 160, 70, 4, 116, 121, 112, 101, 8, 1, 2, 105, 100, 5, 202, 185, 84, 59, 193, 50, 2, 154, 12, 112, 114, 117, 110, 105, 110, 103, 95, 115, 101, 101, 100, 6, 128, 1, 0, 0, 16, 3, 97, 100, 114, 12, 8, 4, 97, 100, 100, 114, 12, 8, 4, 109, 95, 105, 112, 6, 51, 195, 200, 94, 6, 109, 95, 112, 111, 114, 116, 7, 160, 70, 4, 116, 121, 112, 101, 8, 1, 2, 105, 100, 5, 233, 155, 220, 162, 184, 105, 122, 26, 12, 112, 114, 117, 110, 105, 110, 103, 95, 115, 101, 101, 100, 6, 131, 1, 0, 0, 8, 114, 112, 99, 95, 112, 111, 114, 116, 7, 161, 70, 9, 110, 111, 100, 101, 95, 100, 97, 116, 97, 12, 16, 7, 109, 121, 95, 112, 111, 114, 116, 6, 160, 70, 0, 0, 10, 110, 101, 116, 119, 111, 114, 107, 95, 105, 100, 10, 64, 18, 48, 241, 113, 97, 4, 65, 97, 23, 49, 0, 130, 22, 161, 161, 16, 7, 112, 101, 101, 114, 95, 105, 100, 5, 150, 106, 217, 172, 124, 166, 176, 241, 13, 115, 117, 112, 112, 111, 114, 116, 95, 102, 108, 97, 103, 115, 6, 1, 0, 0, 0, 12, 112, 97, 121, 108, 111, 97, 100, 95, 100, 97, 116, 97, 12, 20, 21, 99, 117, 109, 117, 108, 97, 116, 105, 118, 101, 95, 100, 105, 102, 102, 105, 99, 117, 108, 116, 121, 5, 180, 0, 80, 151, 32, 189, 113, 5, 27, 99, 117, 109, 117, 108, 97, 116, 105, 118, 101, 95, 100, 105, 102, 102, 105, 99, 117, 108, 116, 121, 95, 116, 111, 112, 54, 52, 5, 0, 0, 0, 0, 0, 0, 0, 0, 14, 99, 117, 114, 114, 101, 110, 116, 95, 104, 101, 105, 103, 104, 116, 5, 239, 241, 49, 0, 0, 0, 0, 0, 6, 116, 111, 112, 95, 105, 100, 10, 128, 116, 82, 226, 135, 250, 19, 210, 175, 229, 41, 5, 35, 30, 9, 211, 154, 125, 120, 105, 211, 204, 49, 137, 133, 63, 92, 89, 52, 92, 161, 98, 221, 11, 116, 111, 112, 95, 118, 101, 114, 115, 105, 111, 110, 8, 16];

        let mut new_bytes_cursor = Cursor::new(Vec::new());

        parse_object(0, &object_bytes, &mut new_bytes_cursor);

        let deserialized_handshake: HandshakeResponse = bincode::deserialize(&new_bytes_cursor.clone().into_inner()).unwrap();

        assert_eq!(deserialized_handshake.node_data.peer_id, 17415602813447793302);

        let address_string = u32_to_ip(deserialized_handshake.local_peerlist_new[1].adr.addr.m_ip);
        assert_eq!(address_string, "38.14.252.222");
    }

    #[test]
    fn test_parse_object_2() { ;
        // Example handshake response object bytes with rpc_port and rpc_credits_per_hash
        let object_bytes = [
            16, 3, 97, 100, 114, 12, 8, 4, 97, 100, 100, 114, 12, 8, 4, 109, 95, 105, 112, 6, 185, 70, 190, 197, 6, 109, 95, 112, 111, 114, 116, 7, 160, 70, 4, 116, 121, 112, 101, 8, 1, 2, 105, 100, 5, 212, 233, 152, 48, 50, 218, 161, 1,
            20,
            114, 112, 99, 95, 99, 114, 101, 100, 105, 116, 115, 95, 112, 101, 114, 95, 104, 97, 115, 104, // rpc_credits_per_hash
            6,
            153, 153, 25, 0,
            8,
            114, 112, 99, 95, 112, 111, 114, 116, // rpc_port
            7, 161, 70
            ];

        let mut new_bytes_cursor = Cursor::new(Vec::new());

        parse_object(0, &object_bytes, &mut new_bytes_cursor);

        let peerlist_entry: PeerlistEntry = bincode::deserialize(&new_bytes_cursor.clone().into_inner()).unwrap();

        let address_string = u32_to_ip(peerlist_entry.adr.addr.m_ip);
        assert_eq!(address_string, "197.190.70.185");
    }
}
